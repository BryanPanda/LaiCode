package binaryTreeTraversal;

import java.util.*;

public class PostOrder {

	public List<Integer> postOrder(TreeNode root) {
		List<Integer> result = new ArrayList<>();
		// base case
		if (root == null) {
			return result;
		}
		result.addAll(postOrder(root.left));
		result.addAll(postOrder(root.right));
		result.add(root.key);
		return result;
	}

	public List<Integer> postOrder2(TreeNode root) {
		List<Integer> result = new ArrayList<>();
		if (root == null) {
			return result;
		}
		LinkedList<TreeNode> stack = new LinkedList<>();
		stack.offerFirst(root);
		TreeNode prev = null;
		while (!stack.isEmpty()) {
			TreeNode cur = stack.peekFirst();
			// when prev is cur's parent, we are traversing down the tree
			if (prev == null || prev.left == cur || prev.right == cur) {
				// if left child is not null, push it to stack
				if (cur.left != null) {
					stack.offerFirst(cur.left);
				} else if (cur.right != null) {
					// if right child is not null, push it to stack
					stack.offerFirst(cur.right);
				} else {
					stack.pollFirst();
					result.add(cur.key);
				}
			}
			// when prev is cur's left child, we are traversing up the tree from
			// the left
			else if (cur.left == prev) {
				if (cur.right != null) {
					// if right child is not null, push it to stack
					stack.offerFirst(cur.right);
				} else {
					stack.pollFirst();
					result.add(cur.key);
				}
			}
			// when prev is cur's right child, we are traversing up the tree from the right
			else if () {
				
			}
		}
		return result;
	}
}
